version: "3.9"

services:

  redis:
    image: redis:alpine
    networks:
      - frontend

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend

  vote:
    image: dockersamples/examplevotingapp_vote
    ports:
      - 8080:80
    networks:
      - frontend
   
  result:
    image: dockersamples/examplevotingapp_result
    ports:
      - 8081:80
    networks:
      - backend

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      replicas: 2  # Not supported in Compose, so this wonâ€™t auto-scale locally
      
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8082:8080"  # Map cAdvisor's internal port 8080 to external 8082
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /var/lib/docker/:/var/lib/docker/
    networks:
      - monitoring
    deploy:
      mode: global  # Run one instance of cAdvisor per node

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/tmp/prometheus/prometheus.yml
    networks:
      - monitoring
    deploy:
      placement:
        constraints: [node.role == manager]  # Run Prometheus on a manager node
      
networks:
  frontend:
  backend:
  monitoring:

volumes:
  db-data:
  prometheus-data: